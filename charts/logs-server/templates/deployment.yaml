apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
  labels:
    app: {{ .Release.Name }}-deno-webserver
  name: {{ .Release.Name }}
  namespace: default
spec:
  progressDeadlineSeconds: 600
  replicas: {{ .Values.server.replicaCount }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: {{ .Release.Name }}-deno-webserver
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: {{ .Release.Name }}-deno-webserver
    spec:
      initContainers:
        - name: {{ .Release.Name }}-verification-bdd
          image: busybox:1.31
          command: [
                  'sh', 
                  '-c', 
                  'echo -e "Verification du status de la BDD {{ .Release.Name }}-{{ .Values.mariadb.service.name }}"; while ! nc -z {{ .Release.Name }}-{{ .Values.mariadb.service.name }} {{ .Values.mariadb.service.port }}; do sleep 1; printf "-"; done; echo -e "  >> La BDD {{ .Release.Name }}-{{ .Values.mariadb.service.name }} est demarr√©";'
                  ]
        - name: {{ .Release.Name }}-droit-volume
          image: busybox:1.31
          volumeMounts:
            - mountPath: {{ .Values.server.volumes.mountPath }}
              name: {{ .Release.Name }}-{{ .Values.server.volumes.name }}
          command: [
                  'sh', 
                  '-c',
                  'chown -R {{ .Values.server.securityContext.runAsUser }}:{{ .Values.server.securityContext.runAsGroup }} {{ .Values.server.volumes.mountPath }}'
                  ]
      containers:
      - image: {{ .Values.server.image.repository }}:{{ .Values.server.image.tag }}
        imagePullPolicy: {{ .Values.server.image.pullPolicy }}
        name: {{ .Release.Name }}
        livenessProbe:
          initialDelaySeconds: {{ .Values.server.liveness.initialDelaySeconds }}
          periodSeconds: {{ .Values.server.liveness.periodSeconds }}
          failureThreshold: {{ .Values.server.liveness.failureThreshold }}
          httpGet:
            path: /probe?probeType=liveness
            port: {{ .Values.server.service.ports.port }}
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        env:
          - name: MARIA_USER
            valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-mariadb-secret
                  key: user
          - name: MARIA_PASSWORD
            valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-mariadb-secret
                  key: userpassword
          - name: MARIADB_NAME
            valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-mariadb-secret
                  key: db
          - name: MARIADB_HOST
            value: {{ .Release.Name }}-{{ .Values.mariadb.service.name }}
          - name : DATABASE_URL
            value : "mysql://$(MARIA_USER):$(MARIA_PASSWORD)@$(MARIADB_HOST)/$(MARIADB_NAME)?serverVersion={{ .Values.mariadb.image.tag }}"
        volumeMounts:
            - mountPath: {{ .Values.server.volumes.mountPath }}
              name: {{ .Release.Name }}-{{ .Values.server.volumes.name }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
          - name: {{ .Release.Name }}-{{ .Values.server.volumes.name }}
            persistentVolumeClaim:
                 claimName: {{ .Release.Name }}-{{ .Values.server.PVC.name }}

---

apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-{{ .Values.server.service.name }}
  namespace: default
spec:
  ports:
    - protocol: {{ .Values.server.service.ports.protocol }}
      port: {{ .Values.server.service.ports.port }}
      targetPort: {{ .Values.server.service.ports.targetPort }}
  selector:
    app: {{ .Release.Name }}-deno-webserver
  type: {{ .Values.server.service.type }}

---

apiVersion: v1
kind: PersistentVolume
metadata:
    name: {{ .Release.Name }}-{{ .Values.server.PV.name }}
spec:
    accessModes:
        - ReadWriteOnce
    persistentVolumeReclaimPolicy: {{ .Values.server.PV.reclaimPolicy }}
    storageClassName: standard
    capacity:
        storage: {{ .Values.server.PV.size }}
    hostPath:
        path: {{ .Values.server.PV.path }}/{{ .Release.Name }}

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
    name: {{ .Release.Name }}-{{ .Values.server.PVC.name }}
    namespace: default
spec:
    volumeName: {{ .Release.Name }}-{{ .Values.server.PV.name }}
    accessModes:
        - ReadWriteOnce
    resources:
        requests:
            storage: {{ .Values.server.PVC.size }}
